/**
TP 4 Arbres binaires - Prolog


@author Etienne GEANTET
@author Florentin HORTET
@version Annee scolaire 2015/2016


cd /home-info/commun/4info/Eclipse/eclipse_prolog/bin/x86_64_linux$
rlwrap ./eclipse
["/home-reseau/fhortet/Cours/Prolog/TP4/arbre.pl"].
*/

/*
-------------------------------------------------------------------------------
 Arbres
-------------------------------------------------------------------------------
*/

% Quelques arbres à copier coller pour vous faire gagner du temps, mais
% n'hésitez pas à en définir d'autres

/*
arb_bin(1, arb_bin(2, arb_bin(6, vide, vide), vide), arb_bin(3, arb_bin(4, vide, vide), arb_bin(5, vide, vide)))

arb_bin(3, arb_bin(4, vide, vide), arb_bin(5, vide, vide))

arb_bin(3, arb_bin(4, vide, vide), arb_bin(5, 7, vide))

arb_bin(3, arb_bin(4, vide, vide), arb_bin(5, arb_bin(6, vide, vide), arb_bin(7, vide, vide)))

arb_bin(3, arb_bin(5, arb_bin(6, vide, vide), arb_bin(7, vide, vide)), arb_bin(4, vide, vide))

arb_bin(3, arb_bin(6, vide, vide), arb_bin(5, arb_bin(4, vide, vide), arb_bin(7, vide, vide)))

arb_bin(8, arb_bin(4, arb_bin(2, vide, vide), arb_bin(6, vide, vide)), arb_bin(12, arb_bin(10, vide, vide), vide))

arb_bin(8, arb_bin(4, arb_bin(2, _, _), arb_bin(6, _, _)), arb_bin(12, arb_bin(10, _, _), _))

arb_bin(6,arb_bin(2,arb_bin(1,vide,vide),arb_bin(4,vide,vide)),arb_bin(8,vide,arb_bin(10,vide,vide)))

arb_bin(8,arb_bin(2,arb_bin(1,vide,vide),arb_bin(4,vide,vide)),arb_bin(6,vide,arb_bin(10,vide,vide)))

arb_bin(6,arb_bin(2,arb_bin(1,vide,vide),arb_bin(4,vide,vide)),arb_bin(8,arb_bin(2,arb_bin(1,vide,vide),arb_bin(4,vide,vide)),arb_bin(10,vide,vide)))

*/

/*
-------------------------------------------------------------------------------
 Définition des prédicats
-------------------------------------------------------------------------------
*/

/* 2.1 arbre_binaire(+B) qui réussit si B est un arbre binaire d’en-
tiers. */

arbre_binaire(vide).
arbre_binaire(arb_bin(Feuille,vide,vide)):-
		integer(Feuille).
arbre_binaire(arb_bin(Racine,Gauche,Droite)):-
		integer(Racine),
		arbre_binaire(Gauche),
		arbre_binaire(Droite),
		!.


/* Test arbre_binaire

arbre_binaire(arb_bin(1, arb_bin(2, arb_bin(6, vide, vide), vide), arb_bin(3, arb_bin(4, vide, vide), arb_bin(5, vide, vide)))).

Yes (0.00s cpu) 

arbre_binaire(arb_bin(1, arb_bin(2, arb_bin(6, vide, vide), vide), arb_bin(3, arb_bin(4, vide, vide), arb_bin(5, vide, geranium)))).

No (0.00s cpu)
*/

/* 2.2 dans_arbre_binaire(+E, +B) qui réussit si E est l’une des étiquettes de l’arbre binaire B. */
/* on suppose que l'on a un arbre binaire */

dans_arbre_binaire(E,arb_bin(E,G,D)).
dans_arbre_binaire(E,arb_bin(R,G,D)):-
		dans_arbre_binaire(E,G).
dans_arbre_binaire(E,arb_bin(R,G,D)):-
		dans_arbre_binaire(E,D).


/* Test dans_arbre_binaire

dans_arbre_binaire(geranium,arb_bin(1, arb_bin(2, arb_bin(6, vide, vide), vide), arb_bin(3, arb_bin(4, vide, vide), arb_bin(1, vide, vide)))).

No (0.00s cpu)

dans_arbre_binaire(1,arb_bin(1, arb_bin(2, arb_bin(6, vide, vide), vide), arb_bin(3, arb_bin(4, vide, vide), arb_bin(1, vide, vide)))).

Yes (0.00s cpu, solution 1, maybe more) ? ;

Yes (0.00s cpu, solution 2, maybe more) ? ;
*/

/* 2.3 sous_arbre_binaire(+S, +B) qui réussit si S est un sous-arbre de B. */

sous_arbre_binaire(arb_bin(R1,G1,D1),arb_bin(R1,G1,D1)).
sous_arbre_binaire(arb_bin(R1,G1,D1),arb_bin(R2,G2,D2)):-
	sous_arbre_binaire(arb_bin(R1,G1,D1),G2).
sous_arbre_binaire(arb_bin(R1,G1,D1),arb_bin(R2,G2,D2)):-
	sous_arbre_binaire(arb_bin(R1,G1,D1),D2).

/* Test sous_arbre_binaire

sous_arbre_binaire(arb_bin(2, arb_bin(6, vide, vide), vide),arb_bin(1, arb_bin(2, arb_bin(6, vide, vide), vide), arb_bin(3, arb_bin(4, vide, vide), arb_bin(5, vide, vide)))).

Yes (0.00s cpu, solution 1, maybe more) ? ;

*/

/* 2.4 remplacer(+SA1, +SA2, +B, -B1) où B1 est l’arbre B dans lequel toute occurrence du sous-arbre SA1 est remplacée par le sous-arbre SA2.*/

remplacer(_,_,vide,vide).
remplacer(SA1,SA2,SA1,SA2).
remplacer(SA1,SA2,arb_bin(Elem,ArbG1,ArbD1),arb_bin(Elem,ArbG2,ArbD2)):-
	SA1\==arb_bin(Elem,ArbG1,ArbD1),
	remplacer(SA1,SA2,ArbG1,ArbG2),
	remplacer(SA1,SA2,ArbD1,ArbD2).

/* Test remplacer 

remplacer(arb_bin(2,vide,vide),arb_bin(3,vide,vide),arb_bin(1,arb_bin(2,vide,vide),vide),L).

L = arb_bin(1, arb_bin(3, vide, vide), vide)
Yes

remplacer(arb_bin(1,vide,vide),arb_bin(3,vide,vide),arb_bin(1,arb_bin(2,vide,vide),vide),L).

L = arb_bin(1, arb_bin(2, vide, vide), vide)
Yes

*/

/* 2.5 isomorphes(+B1, +B2) qui réussit si les arbres B1 et B2 sont isomorphes. */

isomorphes(B,B).
isomorphes(arb_bin(Elem,ArbG1,ArbD1),arb_bin(Elem,ArbG2,ArbD2)) :-
	arb_bin(Elem,ArbG1,ArbD1)\==arb_bin(Elem,ArbG2,ArbD2),
	isomorphes(ArbG1,ArbG2),
	isomorphes(ArbD1,ArbD2).
isomorphes(arb_bin(Elem,ArbG1,ArbD1),arb_bin(Elem,ArbG2,ArbD2)) :-
	arb_bin(Elem,ArbG1,ArbD1)\==arb_bin(Elem,ArbG2,ArbD2),
	isomorphes(ArbG1,ArbD2),
	isomorphes(ArbD1,ArbG2).

/* test isomorphes 

isomorphes(arb_bin(1,arb_bin(1,vide,vide),vide),arb_bin(1,vide,arb_bin(1,vide,vide))).

Yes

isomorphes(arb_bin(1,arb_bin(1,arb_bin(2,vide,vide),vide),vide),arb_bin(1,arb_bin(1,vide,arb_bin(2,vide,vide)),vide)).

Yes

isomorphes(arb_bin(1,arb_bin(1,arb_bin(2,vide,vide),vide),vide),arb_bin(1,arb_bin(1,vide,arb_bin(3,vide,vide)),vide)).

No
*/

/* 2.6 infixe(+B, -L) qui construit la liste L des informations contenues dans l’arbre
binaire B par parcours infixe. */

infixe(vide,[]).
infixe(arb_bin(Elem,ArbG,ArbD),L) :-
	infixe(ArbG,L1),
	infixe(ArbD,L2),
	append(L1,[Elem|L2],L).

/* test infixe 

infixe(arb_bin(1, arb_bin(2, arb_bin(6, vide, vide), vide), arb_bin(3, arb_bin(4, vide, vide), arb_bin(5, vide, vide))),A).

A = [6, 2, 1, 4, 3, 5]
Yes 

*/

/* 2.7 insertion_arbre_ordonne(+X, +B1, -B2) qui réussit si B2
est l’arbre ordonné d’entiers obtenu par l’insertion de la valeur X dans l’arbre ordonné d’entiers
B1. */

insertion_arbre_ordonne(X,vide,arb_bin(X,vide,vide)).
insertion_arbre_ordonne(X,arb_bin(X,ArbG,ArbD),arb_bin(X,ArbG,ArbD)).
insertion_arbre_ordonne(X,arb_bin(Elem,ArbG,ArbD1),arb_bin(Elem,ArbG,ArbD2)) :-
        >(X,Elem),
        insertion_arbre_ordonne(X,ArbD1,ArbD2).

insertion_arbre_ordonne(X,arb_bin(Elem,ArbG1,ArbD),arb_bin(Elem,ArbG2,ArbD)) :-
        <(X,Elem),
        insertion_arbre_ordonne(X,ArbG1,ArbG2).

/* test insertion_arbre_ordonne

insertion_arbre_ordonne(2,arb_bin(3,arb_bin(1,vide,vide),arb_bin(4,vide,vide)),Res).

Res = arb_bin(3, arb_bin(1, vide, arb_bin(2, vide, vide)), arb_bin(4, vide, vide))
Yes 
*/

/* 2.8 insertion_arbre_ordonne1(+X, +B) qui, utilisant cette nouvelle représenta-
tion, insère la valeur X dans l’arbre ordonné d’entiers B. */

insertion_arbre_ordonne1(X,B):-	
	free(B),
	B = arb_bin(X,_,_),
        !.                    
/*la coupure empeche de rappeller insertion_arbre_ordonne1 sur B.*/
insertion_arbre_ordonne1(X,arb_bin(X,_,_)).
insertion_arbre_ordonne1(X,arb_bin(Elem,_,ArbreD)):-
	>(X,Elem),
	insertion_arbre_ordonne1(X,ArbreD).

insertion_arbre_ordonne1(X,arb_bin(Elem,ArbreG,_)):-
        <(X,Elem),
	insertion_arbre_ordonne1(X,ArbreG).
	
test(arbre,arb_bin(8, arb_bin(4, arb_bin(2, _, _), arb_bin(6, _, _)), arb_bin(12, arb_bin(10, _, _), _))).

